#!/usr/bin/env bash
set -e
source .env

################################################################################
# Utils                                                                        #
################################################################################
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color

function red {
  printf "${RED}$@${NC}\n"
}

function green {
  printf "${GREEN}$@${NC}\n"
}

function yellow {
  printf "${YELLOW}$@${NC}\n"
}
PREFIX=$(green 'CODEMAN >')
PREFIX_ERROR=$(red 'CODEMAN >')

################################################################################
# Commands                                                                     #
################################################################################
help() {
  echo "Codeman is an utility to manage code-server instances"
  echo
  echo "Commands:"
  echo
  echo "  init :"
  echo "   add :"
  echo "  list :"
  echo "remove :"
}

check() {
  for var in "$@"; do
    if ! command -v ${var} &>/dev/null; then
      echo "${PREFIX_ERROR} ${var} could not be found"
      exit
    fi
  done
}

init() {
  # Check local dependencies
  check docker mkcert htpasswd
  # Generate certificates
  case $1 in
  --skip-cert-generation)
    echo "${PREFIX} Skipping certificate generation"
    ;;
  *)
    echo "${PREFIX} Creating certificates for domain *.${DOMAIN}"
    rm -r certs
    mkdir -p certs
    mkcert -key-file ./certs/tls.key -cert-file ./certs/tls.crt "*.${DOMAIN}"
    ;;
  esac

  # Create network
  echo "${PREFIX} Creating ${NETWORK_NAME} network"
  docker network create --driver bridge ${NETWORK_NAME} || true

  # Create traefik dashboard
  echo "${PREFIX} Creating dashboard"

  docker run -d -it \
    --name dashboard \
    --network=${NETWORK_NAME} \
    -p 80:80 \
    -p 443:443 \
    -v "/var/run/docker.sock:/var/run/docker.sock:ro" \
    -v "$PWD/certs/:/certs/:ro" \
    -v "$PWD/traefik/conf.yml:/etc/traefik/dynamic_conf/conf.yml:ro" \
    --label "codeman-dashboard" \
    --label "traefik.enable=true" \
    --label "traefik.http.routers.traefik.rule=Host(\`dashboard.${DOMAIN}\`)" \
    --label "traefik.http.routers.traefik.service=api@internal" \
    --label "traefik.http.routers.traefik.tls=true" \
    --label "traefik.http.routers.traefik.entrypoints=websecure" \
    --label "traefik.http.routers.http-catchall.rule=hostregexp(\`{host:.+}\`)" \
    --label "traefik.http.routers.http-catchall.entrypoints=web" \
    --label "traefik.http.routers.http-catchall.middlewares=redirect-to-https" \
    --label "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https" \
    traefik:latest \
    --entrypoints.web.address=:80 \
    --entrypoints.websecure.address=:443 \
    --providers.docker \
    --providers.docker.exposedByDefault=false \
    --api \
    --providers.file.directory=/etc/traefik/dynamic_conf \
    --providers.file.watch=true
}

add() {
  # Check local dependencies
  check docker

  echo "${PREFIX} Creating code-server and novnc"
  docker run --privileged -d -it \
    --gpus=0 \
    --user="$(id -u):$(id -g)" \
    --name ${1}-code-server \
    --network=${NETWORK_NAME} \
    -e PASSWORD=123456 \
    -e DISPLAY=${1}-novnc:0.0 \
    -e NVIDIA_VISIBLE_DEVICES=0 \
    --label 'codeman-code-server' \
    --label 'traefik.enable=true' \
    --label "traefik.http.services.${1}-code-server.loadbalancer.server.port=8080" \
    --label "traefik.http.routers.${1}-code-server.rule=Host(\`${1}-code-server.${DOMAIN}\`)" \
    --label "traefik.http.routers.${1}-code-server.entrypoints=websecure" \
    --label "traefik.http.routers.${1}-code-server.tls=true" \
    codeman-demo:latest

  docker run -d -it --init \
    --name ${1}-novnc \
    --network=${NETWORK_NAME} \
    -e DISPLAY_WIDTH=1024 \
    -e DISPLAY_HEIGHT=768 \
    -e RUN_XTERM=no \
    -e RUN_FLUXBOX=yes \
    --label 'codeman-novnc' \
    --label 'traefik.enable=true' \
    --label "traefik.http.services.${1}-novnc.loadbalancer.server.port=8080" \
    --label "traefik.http.routers.${1}-novnc.rule=Host(\`${1}-novnc.${DOMAIN}\`)" \
    --label "traefik.http.routers.${1}-novnc.entrypoints=websecure" \
    --label "traefik.http.routers.${1}-novnc.tls=true" \
    theasp/novnc:latest

  echo "${PREFIX} code-server address   : https://${1}-code-server.${DOMAIN}"
  echo "${PREFIX} code-server password  : ${PASSWORD}"
  echo "${PREFIX} novnc address         : https://${1}-novnc.${DOMAIN}/vnc.html"
}

list() {
  # Check local dependencies
  check docker

  echo "${PREFIX} Dashboard"
  docker ps -f label=dashboard
  echo

  echo "${PREFIX} Code Server Containers"
  docker ps -f label=code-server
  echo

  echo "${PREFIX} noVNC Containers"
  docker ps -f label=novnc
  echo
}

remove() {
  # Check local dependencies
  check docker

  # Destroy containers
  echo "${PREFIX} Destroying containers ${1}-code-server and ${1}-novnc"
  docker container rm -f ${1}-code-server || true
  docker container rm -f ${1}-novnc || true
}

destroy() {
  read -p "${PREFIX} This destroys everyhing. Are you sure? (y/N) " -r
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    # Check local dependencies
    check docker

    echo "${PREFIX} Destroying containers"
    docker container rm -f $(docker ps -a -q -f label=codeman-dashboard) || true
    docker container rm -f $(docker ps -a -q -f label=codeman-code-server) || true
    docker container rm -f $(docker ps -a -q -f label=codeman-novnc) || true

    echo "${PREFIX} Destroying network"
    docker network rm ${NETWORK_NAME}
  else
    echo "${PREFIX} No harm done"
  fi
}

case $1 in
init)
  "$@"
  exit
  ;;
add)
  "$@"
  exit
  ;;
list)
  "$@"
  exit
  ;;
remove)
  "$@"
  exit
  ;;
destroy)
  "$@"
  exit
  ;;
*)
  help
  exit
  ;;
esac
